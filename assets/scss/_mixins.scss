@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:color";
@use "variables" as vars;

// Fix: make mixin Dart Sassâ€“compatible and backward compatible with trailing boolean or keyword `important: true`.
@mixin box-shadow($args...) {
  $kwargs: meta.keywords($args);
  $important: false;

  // If passed as a keyword, use it
  @if map.has-key($kwargs, important) {
    $important: map.get($kwargs, important);
  }

  // Build positional list and support trailing boolean as last positional arg
  $positional: ();
  $len: list.length($args);

  @if $len > 0 and meta.type-of(list.nth($args, $len)) == "bool" and not map.has-key($kwargs, important) {
    // Last positional is the important flag
    @for $i from 1 through $len - 1 {
      $positional: list.append($positional, list.nth($args, $i), comma);
    }
    $important: list.nth($args, $len);
  } @else {
    @for $i from 1 through $len {
      $positional: list.append($positional, list.nth($args, $i), comma);
    }
  }

  box-shadow: $positional#{if($important, " !important", "")};
}

@mixin transition($props...) {
  // fallback helper (explicit prop list)
  transition: 0.4s ease;
  transition-property: list.join($props, ", ");
}

// ---------- Transition System (Global) ----------
$transition-duration-fast: 0.2s !default;
$transition-duration-base: 0.4s !default;
$transition-duration-slow: 0.65s !default;
$transition-ease: ease !default;

$transition-safe-props: (
  color,
  background-color,
  border-color,
  box-shadow,
  text-shadow,
  transform,
  opacity,
  filter
) !default;

// Build a combined transition string for safe props
@function build-transition($props: $transition-safe-props, $dur: $transition-duration-base, $ease: $transition-ease) {
  $out: ();
  @each $p in $props {
    $out: list.append($out, "#{$p} #{$dur} #{$ease}", comma);
  }
  @return $out;
}

@mixin transition-props($props: $transition-safe-props, $duration: $transition-duration-base, $ease: $transition-ease) {
  transition: build-transition($props, $duration, $ease);
}

@mixin transition-all($duration: $transition-duration-base, $ease: $transition-ease) {
  transition: all $duration $ease;
}

// Specific nav link mixin
@mixin nav-link-transition($duration: $transition-duration-base, $ease: $transition-ease) {
  transition:
    color $duration $ease,
    transform $transition-duration-fast $ease,
    border-color $duration $ease,
    box-shadow $duration $ease,
    text-shadow $duration $ease,
    font-size $duration $ease;
}

// Placeholder for extend
%smooth-transition {
  @include transition-props();
}

// ---------- GLOBAL APPLICATION (Everything) ----------
*,
*::before,
*::after {
  @include transition-props();
  // Optional: will-change hints (commented out to avoid perf cost)
  // will-change: color, background-color, border-color, box-shadow, transform, opacity, filter;
}

// Reduced motion: strip transitions
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    transition: none !important;
  }
}

@mixin blur-panel($color: rgba(255, 255, 255, 0.4), $shadow) {
  // Accept color, hex string or number; normalize to a color and force alpha to 0.4
  @if meta.type-of($color) == "string" {
    $color: unquote($color);
  }

  @if meta.type-of($color) != "color" {
    // fallback to white translucent
    $color: rgba(255, 255, 255, 0.4);
  }

  $color: rgba(color.red($color), color.green($color), color.blue($color), 0.4) !default;

  border-radius: vars.$border-radius-main;
  background: $color;
  backdrop-filter: blur(5px);
  -webkit-backdrop-filter: blur(5px);
  padding: 30px;
  @include box-shadow($shadow);
}
